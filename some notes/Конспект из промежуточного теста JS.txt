Promise.race(); => Нужен для определения того какой из промисов, переданных в нее, выполнился первым


// Какие функции выполняют функции resolve и reject
Функции resolve и reject являются аргументами конструктора объекта Promise в JavaScript.

resolve - функция, передаваемая в Promise, вызывается, когда асинхронная операция, которая представлена Promise, завершается успешно и возвращает результат.
reject - функция, передаваемая в Promise, вызывается, когда асинхронная операция, которая представлена Promise, завершается с ошибкой.
То есть resolve используется для передачи результата в случае успешного выполнения обещания (promise), а reject используется для передачи ошибки в случае провала выполнения обещания.

Вместе они позволяют создавать цепочки обещаний, которые позволяют упростить и улучшить асинхронное программирование.


// Почему код выведет все через 5 сек  ->

const promisify = (item, delay) =>
    new Promise(resolve => setTimeout(() => resolve(item), delay));
 
const a = () => promisify('a', 100);
const b = () => promisify('b', 5000);
const c = () => promisify('c', 3000);
 
function one() {
    const promises = [a(), b(), c()];
    Promise.all(promises).then(values => console.log(values))
}
 
one();


В данном коде, функция promisify возвращает Promise, который будет успешно выполнен через заданное время delay и вернёт переданный в него аргумент item.

Функции a, b и c, в свою очередь, создают новые Promises, возвращая результат вызова функции promisify с заданными параметрами (значением и временем задержки).

В функции one создаётся массив promises из трёх Promises, возвращаемых функциями a(), b() и c().

Функция Promise.all(promises) создаёт новый Promise, который будет успешно выполнен (resolve) только тогда, когда все промисы входящего массива будут успешно выполнены.

Когда все промисы будут выполнены, аргумент values функции-обработчика этого Promise будет представлять собой массив значений, которые были возвращены промисами.

Так как все промисы в массиве promises успешно выполняются при вызове функции one(), в результате выполнения функции Promise.all(promises) выполнится всего через 5 секунд (так как выполнение промиса b() растягивается на 5 секунд).

В консоли мы увидим массив из трёх значений ['a', 'b', 'c'], так как все Promises в массиве promises успешно завершены и возвращены в виде элементов массива values.


// Про async и await

async и await - это синтаксический сахар над Promise, который позволяет писать асинхронный код в более лаконичной форме.

Ключевое слово async пишется перед объявлением функции и говорит о том, что данная функция является асинхронной. Внутри такой функции можно использовать ключевое слово await перед вызовом функции, которая возвращает Promise. Это позволяет ждать, пока промис будет выполнен, и затем продолжать выполнение функции.

Вместо того, чтобы использовать методы .then() и .catch() для обработки выполненных или отклоненных промисов, вы можете использовать await, чтобы получить результат выполненного промиса.

Кроме того, async и await позволяют лучше организовать код, упрощая его понимание и уменьшая вложенность.